const {log} = require("../../logs");const {getEnv} = require("../../utils");const config = {    "timeout": parseInt(getEnv("TIMEOUT", 30000)),    "queue": {        "url": getEnv("RABBITMQ_URL", "amqp://guest:guest@queue:5672"),        "name": getEnv("QUEUE_NAME", "queue"),        "prefetch": parseInt(getEnv("PREFETCH", 1)),        "options": {            "durable": false,        }    },    "events": {        "onInit": async () => {            log.info(`Initializing Browser...`);        },        "onExit": async (context) => {            log.info(`Cleaning up...`);            // Close Browser            await context.browser.close();            // Stop xvfb            await context.xvfb.stop();        },        "onTaskStart": async (context) => {            // Create Browser Context            context.context = await context.browser.newContext(config.context);            // Create Page            context.page = await context.context.newPage(config.page);            // Setup Events            for (let [eventName, event] of Object.entries(config.context.events)) {                context.context.on(eventName, event);            }            // Hook JavaScript Functions            await context.context.addInitScript(`(${config.page.evaluate.document_start.toString()})();`);        },        "onTaskComplete": async (context) => {            // Close Browser Context            await context.context.close();        },        "onTaskError": async (error) => {            if (error.name === "TimeOutError") {                log.debug("Bot task timed out");            }        },    },    "extend": {        "example": async () => {            log.info(`Example extend function`);        },        // Add close pages function        closePages: async (context) => {            // for (let page of context.context.pages()) {            //     await page.close();            // }            await config.events.onTaskComplete(context);            await config.events.onTaskStart(context);        },        slowType: async (context, selector, text, options = {"delay": 500}) => {            await context.page.type(selector, text, options);        },        setCookies: async (context, cookies) => {            await context.context.addCookies(cookies);        },    },    "allowed_actions": [        "extend.example",        "page.type",        "page.goto",        "page.click",        "page.addCookies",        "extend.slowType",        "extend.setCookies",        "extend.closePages",        "page.waitForTimeout",        "page.waitForSelector",    ],    "xvfb": {        "args": [            "-screen", "0", '1280x720x24', "-ac"        ]    },    "browser": {        "product": "chrome",        "options": {            "headless": false,            "args": [                "--no-sandbox",                "--disable-gpu",                "--ignore-certificate-errors",                "--disable-dev-shm-usage",            ]        }    },    "context": {        "events": {            "console": (message) => {                const level = message.type().toLowerCase();                switch (level) {                    case "error":                        log.error(`console.${level}: ${message.text()}`);                        break;                    case "warn":                    case "warning":                        log.warn(`console.warn: ${message.text()}`);                        break;                    default:                        log.debug(`console.error: ${message.text()}`);                        break;                }            },            "error": (message) => {                log.error(message);            },            "pageerror": (message) => {                log.error(message);            },        },        "options": {            "ignoreHTTPSErrors": true,        }    },    "page": {        "evaluate": {            "document_start": function () {                window.open = () => {                    console.warn("window.open");                };                window.prompt = () => {                    console.warn("window.prompt");                };                window.confirm = () => {                    console.warn("window.confirm");                };                window.alert = () => {                    console.warn("window.alert");                };            }        }    }};module.exports = config;